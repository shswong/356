/*
TODO
1)make checkConflict look only at events with the date being passed to it

2) find index in arraylist of the object with classType = class

3)fix getting date from Event object

-autoscheduled study events should look at the day of class, if cannot find opening, look at next day
-study times should be an hour long
-a study event should be made for each class day (class 3x a week, 3 study events)

-in general for events being made, if conflict occurs, ask user to reschedule or have events overlap



AutoScheduler
is called automatically when a classType = class event is added

1. Go through db and make all rows with eventType = class into Event objects
    1.1 put Event objects into ArrayList
2. set study time at 8:00 AM on same day as class
    2.1 while loop study time  > than 10PM (22)
        2.1.1 for loop going through arraylist
            2.1.1.1 use check method passing study time, study time + 1 hour
                2.1.1.1.1 if true, increment study time by an hour
                2.1.1.1.2 if false, make a study event for 1 hour
                    2.1.1.1.2.1 return;
                    
                    
                    
*/
import java.util.*;

public class taskManager
{
     private ArrayList<Event> listOfEvents; 
     private int globalClassNumber; //this is incremented everytime a classType = "class" is added to db
     
     public taskManager() {
         listOfEvents = new ArrayList();
         globalClassNumber = 1;
     }

     private void autoSchedule(Connection con) throws Exception {
         Statement stat;
         stat = con.createStatement();
         ResultSet rs;
         String query = "SELECT * FROM Table1";//gets everything from db
         rs = stat.executeQuery(query); 
         
        int eventID;
        String eventName;
        String startTime;
        String endTime;
        String eventType;
        int classNumber;
        int priority;
         
         //get all the "class" events to find their start and end times
         while(rs.next()) //goes through each row in db
         {
             if (eventType.equalsIgnoreCase("class") || eventType.equalsIgnoreCase("study"))
             {
                 eventID = rs.getInt("eventID");
                 eventName = rs.getString("eventName");
                 startTime = rs.getString("startTime");
                 endTime = rs.getString("endTime");
                 eventType = rs.getString("eventType");
                 classNumber = rs.getInt("classNumber");
                 priority = rs.getInt("priority");
                
                 listOfEvents.add(new Event(eventID, eventName, splitString(startTime), splitString(endTime), eventType, classnumber, priority));
             }
             else
             {
                 eventID = rs.getInt("eventID");
                 eventName = rs.getString("eventName");
                 startTime = rs.getString("startTime");
                 endTime = rs.getString("endTime");
                 priority = rs.getInt("priority");
                
                 listOfEvents.add(new Event(eventID, eventName, startTime, endTime, priority));
             }
             
             for (int i = 0; i < listofEvents.size(); i++)
             {
                if (listOfEvents.get(i).getEventType().equalsIgnoreCase("class"))
                {
                    //String[] temp1 = splitDate(listOfEvents.get(i).getStartTime());
                    int timer = 8;
                    int month = listOfEvents.get(i).getMonth();
                    int day = listOfEvents.get(i).getDay();
                    int year = listOfEvents.get(i).getYear();
                    boolean flag = true;
                    while (flag)
                    {
                        if (timer > 22)
                        {
                            day++;
                            timer = 8;
                        }
                         if (checkConflict(timer, timer + 1, month, day)
                             timer++;
                         
                         else
                         {
                             //String[] temp = splitDate(listOfEvents.get(0).getStartTime());
                             
                             String AMPM = AM;
                             if (timer > 12)
                             {
                                 AMPM = PM;
                                 timer = timer - 12;
                                 
                             }
                             if (timer == 12)
                                 AMPM = PM;
                             String[] temp = new String[6];
                             dateFill(temp, Integer.toString(timer), 0, AMPM, Integer.toString(month), Integer.toString(day), Integer.toString(year));
                             
                             String[] temp2 - new String[6];
                             dateFill(temp2,Integer.toString(timer+1), 0, AMPM, Integer.toString(month), Integer.toString(day), Integer.toString(year));
                             //MAKE STUDY EVENT
                             addEvent(con, "study for "+listOfEvent.get(i).getEventName(), temp, temp2, study);
                             return;
                         }
                     }//while
                  } //if  
              }//for
         }//while
     }
     
     private boolean checkConflict(int startHour, int endHour, int month, int day) {
         for (int i = 0; i < listOfEvents.size(); i++)
         {
             if (listOfEvents.get(i).getStartHour() == startHour && listOfEvents.get(i).getEndHour() == endHour && listOfEvents.get(i).getMonth() != month && listOfEvents.get(i).getDay() != day)
             {
                 return true; // there is a conflict
             }
         }
         return false; // found no conflict
     }
     
     private String[] splitDate(String date)
     {
         String[] temp1 = date.split(" "); // split by space
         String[] temp2 = temp1[0].split("/)"; // split by /
         //5/21/2010 10:00 AM
         return temp2; // return 5 21 2010 in one array
     }
     
     private String[] splitTime(String date)
     {
         String[] temp1 = date.split(" "); // split by space
         String[] temp2 = temp1[1].split(":"); // split by :
         //5/21/2010 10:00 AM
         String[] temp3 = {temp2[0], temp2[1], temp1[2]};
         return temp3; // return 10 00 AM in one array
     }
     
     private String[] splitString(String date)
     {
         String[] temp1 = splitDate(date);
         String[] temp2 = splitTime(date);
         String[] temp3 = new String[6];
         return dateFill(temp3, temp2[0], temp2[1], temp2[2], temp1[0], temp1[1], temp1[2]);
     }
     
     private String[] dateFill(String[] date, String hours, String minutes, String ampm, String month, String day, String year) {
         date[0] = month;
         date[1] = day;
         date[2] = year;
         date[3] = hours;
         date[4] = minutes;
         date[5] = ampm;
         return date;
     }
     
     private String dateString(String[] date) {
         //return month+" "+day+", "+year+" "+hours+":"+minutes+" "+ampm
         //5/21/2010 10:00 AM
         return date[3]+"/"+date[4]+"/ "+date[5]+" "+date[0]+":"+date[1]+" "+date[2];
     }
     
     public void addEvent(Connection con, String eventName, String startTime, String endTime, String eventType) throws Exception {
            String query = "INSERT INTO Table1 (eventName,startTime,endTime,startDate,endDate) VALUES (?,?,?,?,?)";
            PreparedStatement ps = con.prepareStatement(query);
            
            ps.setString(1,name);
            ps.setString(2,time1);
            ps.setString(3,time2);
            ps.setString(4,date1);
            ps.setString(5,date2);
            
            int rows = ps.executeUpdate();
            
            //increment classNumber after adding to db
            if (eventType.equalsIgnoreCase("class"))
            {
                globalClassNumber++;
            }
     }
         
     public void delete(int ID) {
         String query = "DELETE FROM Table 1 WHERE eventID = " + ID; 
         globalClassNumber--;
     }
}